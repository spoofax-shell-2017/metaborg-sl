module SL

imports
	
	Common

context-free start-symbols
  
  Program FunDef Shell

context-free syntax
  
  Program.Program = [[{FunDef "\n"}*]]
  
context-free syntax
  
  FunDef.FunDef = [
    function [ID]([{ID ", "}*]) [Block]
  ]

  Expr.FunCall = [[ID]([{Expr ","}*])]
  
  ID = [function] {reject}

context-free syntax

  Expr.Int = INT
  Expr.String = STRING
  Expr.True = [true]
  Expr.False = [false]

  Expr.Add = [[Expr] + [Expr]]  {left}
  Expr.Div = [[Expr] / [Expr]]  {left}
  Expr.Mul = [[Expr] * [Expr]]  {left}
  Expr.Sub = [[Expr] - [Expr]]  {left}
  Expr.Eq  = [[Expr] == [Expr]] {non-assoc}
  Expr.Lte = [[Expr] <= [Expr]] {non-assoc}
  Expr.Lt  = [[Expr] < [Expr]]  {non-assoc}
  Expr.Neq = [[Expr] != [Expr]] {non-assoc}
  Expr.Gte = [[Expr] >= [Expr]] {non-assoc}
  Expr.Gt  = [[Expr] > [Expr]]  {non-assoc}
  Expr.And = [[Expr] && [Expr]] {left}
  Expr.Or  = [[Expr] || [Expr]] {left}
  Expr.Not = [![Expr]]
  Expr = [([Expr])] {bracket}

  ID = [true] {reject}
  ID = [false] {reject}

  Expr.VarRead = ID
  Expr.VarWrite = [[ID] = [Expr]] {right}
  Expr.PropRead = [[Expr].[ID]]
  Expr.PropWrite = [[Expr].[ID] = [Expr]] {right}
  Expr.MethodCall = [[Expr].[ID]([{Expr ","}*])]

context-free syntax

  Stmt.Stmt = [[Expr];]
  
  Stmt = Block

  Block.Block = [
    {
      [{Stmt "\n"}*]
    }
  ]

  Stmt.While = [
    while([Expr]) [Block]
  ]
  
  Stmt.IfNoElse = [if ([Expr]) [Block]]
  
  Stmt.IfThenElse = [if ([Expr]) [Block] else [Block]]
  
  Stmt.Return = [return [Expr];]
  Stmt.ReturnVoid = [return;]
  Stmt.Break = [break;]
  Stmt.Continue = [continue;]

  ID = [return] {reject}
  ID = [break] {reject}
  ID = [continue] {reject}
  ID = [while] {reject}
  ID = [if] {reject}
  ID = [else] {reject}

context-free priorities
  {left: Expr.MethodCall}
  > {right: Expr.Not}
  > {left: Expr.Mul Expr.And}
  > {non-assoc: Expr.Eq Expr.Lt Expr.Lte Expr.Neq Expr.Gt Expr.Gte}
  > {left: Expr.Add Expr.Sub Expr.Or}
  > {right: Expr.VarWrite Expr.PropWrite}

context-free syntax
//  Shell.StmtBlock = Block {prefer}
//  Shell = Stmt
//  Shell = Expr
//  Shell = FunDef

  Shell.Def = [[ID] = [Expr]]
